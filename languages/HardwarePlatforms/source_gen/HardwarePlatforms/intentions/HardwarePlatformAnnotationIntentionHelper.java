package HardwarePlatforms.intentions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

/**
 * Helper class for annotating suitable models with a hardware platform annotation.
 * 
 * @author Dennis Leroy Wigand (dwigand@techfak.uni-bielefeld.de)
 */
public class HardwarePlatformAnnotationIntentionHelper {

  /**
   * Retrieve the description for the hardware platform to show in the context menu.
   * 
   * @author Dennis Leroy Wigand (dwigand@techfak.uni-bielefeld.de)
   * @param node suitable for annotation.
   * @param hardwarePlatformString specific description from the specialized hardware platform.
   * @param annotationConcept to check if it is already attached.
   * @return description for the context menu.
   */
  public static String getHardwarePlatformDescription(SNode node, String hardwarePlatformString, SConcept annotationConcept) {
    String ret = "";
    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform"))) != null) && AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform"))).getConcept().isSubConceptOf(annotationConcept)) {
      ret = "Remove " + hardwarePlatformString + " (Hardware Platform)";
    } else {
      ret = "Use " + hardwarePlatformString + " (Hardware Platform)";
    }
    return ret;
  }

  /**
   * Helper function to attach an annotation.
   * 
   * @author Dennis Leroy Wigand (dwigand@techfak.uni-bielefeld.de)
   * @param node suitable to be annotated.
   * @param hardwarePlatformString pecific description from the specialized hardware platform.
   * @param annotationConcept to be instantiated.
   */
  public static void attachHardwarePlatform(SNode node, String hardwarePlatformString, SConcept annotationConcept) {
    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform"))) != null) && AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform"))).getConcept().isSubConceptOf(annotationConcept)) {
      AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform")), null);
    } else if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform"))) == null)) {
      SNode annotation = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(annotationConcept));
      SPropertyOperations.set(annotation, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), hardwarePlatformString + " (Hardware Platform)");
      AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xd943373f819f4ebeL, 0xb0e094c5169d72a2L, 0x2c5757d10fb472c7L, "HardwarePlatforms.structure.IAmHardwarePlatform")), annotation);
    }
  }

}
