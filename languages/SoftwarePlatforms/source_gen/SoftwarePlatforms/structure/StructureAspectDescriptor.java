package SoftwarePlatforms.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptIAmSoftwarePlatform = createDescriptorForIAmSoftwarePlatform();
  /*package*/ final ConceptDescriptor myConceptIBelongToSoftwarePlatform = createDescriptorForIBelongToSoftwarePlatform();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptIAmSoftwarePlatform.getId(), 0);
    myIndexMap.put(myConceptIBelongToSoftwarePlatform.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIAmSoftwarePlatform, myConceptIBelongToSoftwarePlatform);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptIAmSoftwarePlatform;
      case 1:
        return myConceptIBelongToSoftwarePlatform;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForIAmSoftwarePlatform() {
    return new ConceptDescriptorBuilder("SoftwarePlatforms.structure.IAmSoftwarePlatform", MetaIdFactory.conceptId(0x8fb3e629b68f443eL, 0xb616d61142df624bL, 0x2c5757d10fb46b85L)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).alias("Software Platform Annotation", "").sourceNode(new SNodePointer("r:56615c25-6688-4e79-8ad6-39fc10e647cf(SoftwarePlatforms.structure)", "3195119016065919877")).create();
  }
  private static ConceptDescriptor createDescriptorForIBelongToSoftwarePlatform() {
    return new ConceptDescriptorBuilder("SoftwarePlatforms.structure.IBelongToSoftwarePlatform", MetaIdFactory.conceptId(0x8fb3e629b68f443eL, 0xb616d61142df624bL, 0x2c5757d10fb48dd3L)).version(1).interface_().sourceNode(new SNodePointer("r:56615c25-6688-4e79-8ad6-39fc10e647cf(SoftwarePlatforms.structure)", "3195119016065928659")).create();
  }
}
